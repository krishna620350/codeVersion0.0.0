name: CICD
on:
    push:
        branches: [work]
jobs:
    build:
        runs-on: [ubuntu-latest]
        steps:
            - name: checkout source
              uses: actions/checkout@v3
            - name: login to docker hub
              run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
            - name: create dummy Dockerfile if not exists
              run: |
                if [ ! -f Dockerfile ]; then
                  echo -e "FROM busybox\nCMD echo 'Hello, World!'" > Dockerfile
                fi
            - name: check Dockerfile exists
              run: test -f Dockerfile
            - name: build docker image
              run: docker build -t ${{ secrets.DOCKER_USERNAME }}/codeversionwork .
            - name: push docker image
              run: docker push ${{ secrets.DOCKER_USERNAME }}/codeversionwork:latest
    deploy:
        needs: build
        runs-on: [ubuntu-latest]
        env:
            SSH_KEY: ${{ secrets.SSH_KEY }}
            KEY_FILE_NAME: ${{secrets.KEY_FILE_NAME}}
            AWS_CONNECTION: ${{ secrets.AWS_CONNECTION }}
        steps:
            - name: create SSH key file
              run: echo "$SSH_KEY" | tr -d '\r' > $KEY_FILE_NAME
            - name: set permissions for SSH key file
              run: chmod 600 $KEY_FILE_NAME
            - name: verify SSH key file
              run: cat $KEY_FILE_NAME
            - name: execute Docker commands on aws
              run: |
                ssh -o StrictHostKeyChecking=no -t -i "$KEY_FILE_NAME" $AWS_CONNECTION << 'EOF'
                  docker pull ${{ secrets.DOCKER_USERNAME }}/codeversionwork:latest
                  docker rm -f codeversionwork-container || true
                  docker run -d -p 5002:5002 --name codeversionwork-container ${{ secrets.DOCKER_USERNAME }}/codeversionwork
                  exit
                EOF
            - name: permanently delete SSH key file
              run: shred -u $KEY_FILE_NAME