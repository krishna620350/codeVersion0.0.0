name: CICD
on:
    push:
        branches: [work]
    pull_request:
        branches: [work]
jobs:
    build:
        runs-on: [ubuntu-latest]
        steps:
            - name: checkout source
              uses: actions/checkout@v3
            - name: login to docker hub
              run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            - name: create or update Dockerfile with required permissions
              run: |
                if [ -f Dockerfile ]; then
                  echo "${{ secrets.ENV_DOCKER }}" > Dockerfile
                else
                  echo "${{ secrets.ENV_DOCKER }}" > Dockerfile
                  chmod 600 Dockerfile
                fi
            - name: check Dockerfile exists
              run: test -f Dockerfile
            - name: build docker image
              run: docker build -t ${{ secrets.DOCKER_USERNAME }}/codeversionwork .
            - name: push docker image
              run: docker push ${{ secrets.DOCKER_USERNAME }}/codeversionwork:latest
            - name: permanently delete Dockerfile
              run: shred -u Dockerfile
    deploy:
        needs: build
        runs-on: [ubuntu-latest]
        env:
            SSH_KEY: ${{ secrets.SSH_KEY }}
            KEY_FILE_NAME: ${{secrets.KEY_FILE_NAME}}
            AWS_CONNECTION: ${{ secrets.AWS_CONNECTION }}
        steps:
            - name: create SSH key file
              run: echo "$SSH_KEY" | tr -d '\r' > $KEY_FILE_NAME
            - name: set permissions for SSH key file
              run: chmod 600 $KEY_FILE_NAME
            - name: verify SSH key file
              run: cat $KEY_FILE_NAME
            - name: execute Docker commands on aws
              run: |
                ssh -o StrictHostKeyChecking=no -t -i "$KEY_FILE_NAME" $AWS_CONNECTION << 'EOF'
                  if ! command -v docker &> /dev/null; then
                    echo "Docker not found, installing..."
                    sudo apt update
                    sudo apt install docker.io -y
                  else
                    echo "Docker is already installed, checking for updates..."
                    sudo apt-get update
                    sudo apt-get install --only-upgrade docker.io -y
                  fi
                  if [ $(sudo stat -c "%a" /var/run/docker.sock) -ne 666 ]; then
                    sudo chmod 666 /var/run/docker.sock
                  fi
                  docker pull ${{ secrets.DOCKER_USERNAME }}/codeversionwork:latest
                  docker rm -f codeversionwork-container || true
                  docker run -d -p 5002:5002 --name codeversionwork-container ${{ secrets.DOCKER_USERNAME }}/codeversionwork
                  exit
                EOF
            - name: verify container is running
              run: |
                ssh -o StrictHostKeyChecking=no -t -i "$KEY_FILE_NAME" $AWS_CONNECTION << 'EOF'
                  docker ps -a
                  docker logs codeversionwork-container
                  curl -I http://localhost:5002
                  exit
                EOF
            - name: permanently delete SSH key file
              run: shred -u $KEY_FILE_NAME